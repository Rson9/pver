name: Release

on:
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: 'New version tag (e.g., v1.0.1)'
        required: true
        default: 'v1.0.0'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # 需要写入权限的token

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Generate source package
        id: source-package
        run: |
          VERSION=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')
          mkdir -p pver-$VERSION
          
          # 修复：使用正确的文件复制命令，排除目标目录
          cp -r ./* pver-$VERSION/ 2>/dev/null || :  # 忽略错误
          cp -r ./.??* pver-$VERSION/ 2>/dev/null || :  # 复制隐藏文件
          
          # 移除可能错误复制的目录
          rm -rf pver-$VERSION/pver-$VERSION
          
          tar czvf pver-$VERSION.tar.gz pver-$VERSION
          SHA256=$(sha256sum pver-$VERSION.tar.gz | awk '{print $1}')
          
          # 查找PKGBUILD文件位置
          PKGBUILD_PATH=$(find . -name "PKGBUILD" | head -n 1)
          if [ -z "$PKGBUILD_PATH" ]; then
            echo "警告: 未找到PKGBUILD文件，跳过更新"
            echo "pkgbuild_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "找到PKGBUILD文件: $PKGBUILD_PATH"
            echo "pkgbuild_found=true" >> $GITHUB_OUTPUT
            
            # 更新PKGBUILD中的版本和校验和
            sed -i "s/pkgver=.*/pkgver=$VERSION/" "$PKGBUILD_PATH"
            sed -i "s/sha256sums=('.*')/sha256sums=('$SHA256')/" "$PKGBUILD_PATH"
            
            # 将PKGBUILD路径保存到输出
            echo "pkgbuild_path=$PKGBUILD_PATH" >> $GITHUB_OUTPUT
          fi
          
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.source-package.outputs.pkgbuild_found == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ steps.source-package.outputs.pkgbuild_path }}
          git commit -m "Update PKGBUILD for ${{ github.event.inputs.version }}" || echo "没有更改需要提交"
          git push || echo "没有更改需要推送"

      - name: Create and push tag
        run: |
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

  build-and-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}  # 构建指定标签

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build binary
        run: |
          output_name=pver
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name=pver.exe
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $output_name main.go

      - name: Archive binary
        id: archive
        run: |
          archive_name="pver_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.event.inputs.version }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r ${archive_name}.zip pver.exe
            echo "archive_file=${archive_name}.zip" >> $GITHUB_OUTPUT
          else
            tar czvf ${archive_name}.tar.gz pver
            echo "archive_file=${archive_name}.tar.gz" >> $GITHUB_OUTPUT
          fi

  arch-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}  # 构建指定标签

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Generate Arch package
        id: arch-package
        run: |
          VERSION=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')
          mkdir -p pver-$VERSION
          cp -r ./* pver-$VERSION/
          tar czvf pver-arch-$VERSION.tar.gz pver-$VERSION
          echo "archive_file=pver-arch-$VERSION.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload Arch package
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.arch-package.outputs.archive_file }}
          tag_name: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-release:
    needs: [build-and-release, arch-release]
    runs-on: ubuntu-latest
    steps:
      - name: Upload all artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            pver_*_*_${{ github.event.inputs.version }}.*
            pver-arch-*.tar.gz
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
