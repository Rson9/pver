name: Release

on:
  # 原有触发条件：推送标签时
  push:
    tags:
      - 'v*.*.*'
    # 新增触发条件：推送 workflow 文件时
    paths:
      - '.github/workflows/release.yml'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build binary
        run: |
          output_name=pver
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name=pver.exe
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $output_name main.go

      - name: Archive binary
        id: archive
        run: |
          archive_name="pver_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.ref_name }}"

          # 如果不是标签触发的构建，使用 commit SHA 作为版本标识
          if [[ "${{ github.ref_type }}" != "tag" ]]; then
            archive_name="pver_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.sha }}"
          fi

          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r ${archive_name}.zip pver.exe
            echo "archive_file=${archive_name}.zip" >> $GITHUB_OUTPUT
          else
            tar czvf ${archive_name}.tar.gz pver
            echo "archive_file=${archive_name}.tar.gz" >> $GITHUB_OUTPUT
          fi

  # 新增专门为 Arch Linux 生成源码包的作业
  arch-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的提交历史

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Generate Arch Linux source package
        id: arch-package
        run: |
          # 获取版本号
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          else
            VERSION="$(date +%Y%m%d)-${{ github.sha }}"
          fi
          
          # 创建源码包目录
          mkdir -p pver-$VERSION
          cp -r ./* pver-$VERSION/
          
          # 打包源码
          tar czvf pver-$VERSION.tar.gz pver-$VERSION
          
          # 计算 SHA256 校验和
          SHA256=$(sha256sum pver-$VERSION.tar.gz | awk '{print $1}')
          
          # 更新 PKGBUILD 中的校验和
          if [ -f "pver-$VERSION/PKGBUILD" ]; then
            sed -i "s/pkgver=.*/pkgver=$VERSION/" pver-$VERSION/PKGBUILD
            sed -i "s/sha256sums=('.*')/sha256sums=('$SHA256')/" pver-$VERSION/PKGBUILD
          fi
          
          # 重新打包更新后的源码
          tar czvf pver-arch-$VERSION.tar.gz pver-$VERSION
          
          echo "archive_file=pver-arch-$VERSION.tar.gz" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Draft Release (for non-tag builds)
        id: create-draft-release
        if: github.ref_type != 'tag'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: draft-${{ github.sha }}
          release_name: Draft Release (${{ github.sha }})
          draft: true
          prerelease: true

      - name: Upload Arch Linux Source Package
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.arch-package.outputs.archive_file }}
          tag_name: ${{ github.ref_name }}
          # 如果不是标签触发的构建，使用创建的 draft release
          release_name: ${{ github.ref_type == 'tag' && github.ref_name || steps.create-draft-release.outputs.html_url }}
          body: |
            # Arch Linux Package
            
            SHA256: ${{ steps.arch-package.outputs.sha256 }}
            
            To install on Arch Linux: